from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
import aiogram.utils.markdown as md
from aiogram.types import ParseMode
from keyboards import kb_menu, kb_gender, kb_active, kb_formuls
from untils import *
from cfg import API_TOKEN
import logging

logging.basicConfig(level = logging.INFO)

# Initialize bot and dispatcher, storage
bot = Bot(token = API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage = storage)

# Storage calories data
class FORM_DATA(StatesGroup):
    age = State()
    growth = State()
    weight = State()
    gender = State()
    active = State()

# Storage bmi data
class FORM_DATA_BMI(StatesGroup):
    growth = State()
    weight = State()

# Bmi picture
BMI_NORMS_URL = './static/bmi_banner.png'

"""     
COMMANDS HANDLER
"""

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã - /start | !start | /s | !s
@dp.message_handler(commands = ['start', 's'], commands_prefix = "/!")
async def start_processing(msg: types.Message):
    """Answer on start"""
    await msg.answer('<i>–ü—Ä–∏–≤–µ—Ç</i> <b>{user.first_name}</b>!\n<i>–ú–µ–Ω—è –∑–æ–≤—É—Ç</i> <b>Fitness Bot</b><i>, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:</i>'
                    .format(user = msg.from_user), parse_mode="HTML", reply_markup = kb_menu)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã - /help | !help | /h | !h
@dp.message_handler(commands = ['help', 'h'], commands_prefix = "/!")
async def help_processing(msg: types.Message):
    """Answer on help"""
    await msg.answer('‚ùóÔ∏è<i>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:</i> /start. <i>–ü–æ—Å–ª–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á—ë—Ç–∞. –Ø –ø–æ–ø—Ä–æ—à—É —É —Ç–µ–±—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —á–µ–∫-–ª–∏—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!</i> üìä\n\nüìã <b>–°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n1. /start (/s, !s) - –≤—ã–±—Ä–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é (–º–µ–Ω—é)\n2. /help (/h, !h) - –ø–æ–º–æ—â—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏\n3. /info (/i, !i) - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n4. /calories - —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–ª–æ—Ä–∏–π\n5. /bmi - —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∏–º—Ç', parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã - /info | !info | /i | !i
@dp.message_handler(commands = ['info', 'i'], commands_prefix = "/!")
async def info_processing(msg: types.Message):
    """Answer on info"""
    await msg.answer('‚ÑπÔ∏è <b>Fitness Bot</b> <i>–∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–µ–ª–∞.</i> üßò\n\n1‚É£ <b>–†–∞—Å—á—ë—Ç –∫–∞–ª–ª–æ—Ä–∏–π</b>. <i>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–¥—Å—á—ë—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–ª–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–≤–æ–¥–∏—Ç–µ.</i>\n\n<b>Fitness Bot</b> <i>—É–º–µ–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø–æ 2 —Ñ–æ—Ä–º—É–ª–∞–º:</i>\n1. <i>–î–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–æ—Ä–º—É–ª—ã –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –¥–∞–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–µ–ø–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞.</i>\n2. <i>–ü–µ—Ä–≤—ã–π —Ä–∞–∑ –æ —Ñ–æ—Ä–º—É–ª–µ  –•–∞—Ä—Ä–∏—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ 1919 –≥–æ–¥—É –î–∂–µ–π–º—Å–æ–º –ê—Ä—Ç—É—Ä–æ–º –•–∞—Ä—Ä–∏—Å–æ–º –∏ –§—Ä—ç–Ω—Å–∏—Å–æ–º –ì–∞–Ω–æ –ë–µ–Ω–µ–¥–∏–∫—Ç–æ–º. –û–Ω–∞ —Å–ª—É–∂–∏—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–∑–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞. –†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ñ–æ—Ä–º—É–ª–∞–º–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—Ç. –ü–µ—Ä–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ –±—ã–ª–∞ –≤—ã–≤–µ–¥–µ–Ω–∞ –Ω–µ —Ç–∞–∫ –¥–∞–≤–Ω–æ, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –≤—Ç–æ—Ä–æ–π.</i>\n\n2‚É£ <b>–†–∞—Å—á—ë—Ç –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢)</b>. <i>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≥–æ, –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ª–∏ –≤—ã –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤–µ—Å–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–æ—Å—Ç–∞. –≠—Ç–æ –¥–∞–µ—Ç –≤–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, –∏–º–µ–µ—Ç–µ –ª–∏ –≤—ã ¬´–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å¬ª, ¬´<b>–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å</b>¬ª, ¬´<b>–∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å</b>¬ª –∏–ª–∏ ¬´<b>–æ–∂–∏—Ä–µ–Ω–∏–µ</b>¬ª —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —Ä–æ—Å—Ç–∞.</i>\n\n‚ùóÔ∏è<i>–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤ –≤–∑—è—Ç—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.</i>', parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã - /cancel | !cancel
@dp.message_handler(state = '*', commands = ['cancel'], commands_prefix = "/!")
@dp.message_handler(Text(equals = '–æ—Ç–º–µ–Ω–∞', ignore_case = True), state = '*')
async def cancel_processing(msg: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await msg.reply('<i>–û–∫. –Ø –æ—Ç–º–µ–Ω–∏–ª —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è.</i>', parse_mode = 'HTML')
    await msg.answer('<i>–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ !s, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π.</i>', parse_mode = 'HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã - /calories | !calories
@dp.message_handler(commands = ['calories'], commands_prefix = "/!")
async def calories_processing(msg: types.Message):
    await FORM_DATA.age.set()
    await msg.answer('<i>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ç–µ–±—è. –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –≤–≤–µ–¥—ë—à—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: /cancel.</i>', parse_mode = 'HTML')
    await msg.answer('<i>–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</i>', parse_mode = 'HTML')
    calories_function()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã - /bmi | !bmi
@dp.message_handler(commands = ['bmi'], commands_prefix = "/!")
async def bmi_processing(msg: types.Message):
    await FORM_DATA.age.set()
    await msg.answer('<i>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ç–µ–±—è. –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –≤–≤–µ–¥—ë—à—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: /cancel.</i>', parse_mode = 'HTML')
    await msg.answer('<i>–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</i>', parse_mode = 'HTML')
    bmi_function()


"""     
/COMMANDS HANDLER
"""

"""     
MENU BUTTONS PROCESSING
"""

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π
@dp.callback_query_handler(lambda call: call.data)
async def processing_menu(callback_query: types.CallbackQuery):
    call = callback_query.data

    if ( call == 'btnCalories' ):
        try:
            await FORM_DATA.age.set()
            await bot.send_message(callback_query.from_user.id,'<i>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ç–µ–±—è. –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –≤–≤–µ–¥—ë—à—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: /cancel.</i>', parse_mode = 'HTML')
            await bot.send_message(callback_query.from_user.id,'<i>–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</i>', parse_mode = 'HTML')
            calories_function()
        except:
            pass

    elif ( call == 'btnBmi' ):
        try:
            await FORM_DATA_BMI.growth.set()
            await bot.send_message(callback_query.from_user.id,'<i>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ç–µ–±—è. –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –≤–≤–µ–¥—ë—à—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: /cancel.</i>', parse_mode = 'HTML')
            await bot.send_message(callback_query.from_user.id,'<i>–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º.</i>', parse_mode = 'HTML')
            bmi_function()
        except:
            pass

"""     
/MENU BUTTONS PROCESSING
"""

"""BOT FUNCTIONS"""

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –ò–ú–¢
def bmi_function():
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–æ—Å—Ç
    @dp.message_handler(lambda message: message.text.isdigit(), state = FORM_DATA_BMI.growth)
    async def processing_growth(msg: types.Message, state: FSMContext):
        """Growth"""
        try:
            await state.update_data(growth = int(msg.text))
            await FORM_DATA_BMI.next()
            await msg.answer("<i>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏ —è —Å–º–æ–≥—É —Ä–∞—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π –∏–º—Ç. –ö–∞–∫–æ–π —Ç–≤–æ–π –≤–µ—Å –≤ –∫–≥?</i>", parse_mode = 'HTML')
        except:
            pass

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–µ—Å
    @dp.message_handler(lambda message: message.text.isdigit(), state = FORM_DATA_BMI.weight)
    async def processing_weight(msg: types.Message, state: FSMContext):
        global bmi, bmiText
        
        """Weight"""
        try:
            await FORM_DATA_BMI.next()
            await state.update_data(weight = int(msg.text))

            async with state.proxy() as data:
                bmi = calc_bmi(data['growth'], data['weight'])

            if bmi < 18.5:
                bmiText = '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–µ—Å–∞ ‚ö†Ô∏è\n\n–¢–≤–æ–π –ò–ú–¢ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π, —Å—Ç–∞—Ä–∞–π—Å—è –¥–µ—Ä–∂–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã! üòï'
            elif bmi > 25:
                bmiText = '–∏–∑–±—ã—Ç–æ–∫ –≤–µ—Å–∞ ‚ö†Ô∏è\n\n–¢–≤–æ–π –ò–ú–¢ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Å—Ç–∞—Ä–∞–π—Å—è –¥–µ—Ä–∂–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã! üòï'
            else:
                bmiText = '–Ω–æ—Ä–º–∞ üëç\n\n–¢–≤–æ–π –ò–ú–¢ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ–≥–æ —Ç–∞–∫–∏–º! üôÇ'
            
            await bot.send_message(msg.from_user.id, 
            '‚úçÔ∏è –í—Å—ë –≥–æ—Ç–æ–≤–æ! –Ø –ø–æ—Å—á–∏—Ç–∞–ª —Ç–≤–æ–π –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞.\n\n‚úÖ –¢–≤–æ–π –ò–ú–¢: <b>{0}</b> - {1}'
            .format(bmi, bmiText), parse_mode = 'HTML')

            await bot.send_message(msg.from_user.id, '<i>–ù–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ—Ä–º—ã –ò–ú–¢:</i>', parse_mode = 'HTML')

            await bot.send_photo(msg.from_user.id, open(BMI_NORMS_URL, 'rb'))

            await bot.send_message(msg.from_user.id, '<i>–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å,\n—Ç–æ –Ω–∞–ø–∏—à–∏: /bmi.\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–ø–∏—à–∏: /start.</i>', parse_mode = 'HTML')

            await state.finish()
        except:
            pass

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–ª–æ—Ä–∏–π
def calories_function():
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    @dp.message_handler(lambda message: message.text.isdigit(), state = FORM_DATA.age)
    async def processing_age(msg: types.Message, state: FSMContext):
        """Age"""
        try:
            async with state.proxy() as data:
                data['age'] = int(msg.text)
            await FORM_DATA.next()
            await msg.answer('<i>–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º.</i>', parse_mode = 'HTML')
        except:
            pass

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–æ—Å—Ç
    @dp.message_handler(lambda message: message.text.isdigit(), state = FORM_DATA.growth)
    async def processing_growth(msg: types.Message, state: FSMContext):
        """Growth"""
        try:
            await FORM_DATA.next()
            await state.update_data(growth = int(msg.text))
            await msg.answer('<i>–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è —Ç–≤–æ–π –≤–µ—Å –≤ –∫–≥. –ñ–¥—É...</i>', parse_mode = 'HTML')
        except:
            pass

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–µ—Å
    @dp.message_handler(lambda message: message.text.isdigit(), state = FORM_DATA.weight)
    async def processing_weight(msg: types.Message, state: FSMContext):
        """Weight"""
        try:
            await FORM_DATA.next()
            await state.update_data(weight = int(msg.text))
            await msg.answer('<i>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª.</i>', reply_markup = kb_gender, parse_mode = 'HTML')
        except:
            pass

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ - genderMale –∏ genderFemale
    @dp.callback_query_handler(text_contains = 'gender', state = FORM_DATA.gender)
    async def processing_gender(callback_query: types.CallbackQuery, state: FSMContext):
        try:
            await FORM_DATA.next()
            async with state.proxy() as data:
                data['gender'] = callback_query.data
            await bot.send_message(callback_query.from_user.id,
                '<i>–ü–æ—á—Ç–∏ –≤—Å—ë! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –∞–∫—Ç–∏–Ω—ã–π(–∞—è). –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ '
                '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.</i>', reply_markup = kb_active, parse_mode = 'HTML')
        except:
            pass

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ - active
    @dp.callback_query_handler(lambda call: call.data, state = FORM_DATA.active)
    async def processing_active(callback_query: types.CallbackQuery, state: FSMContext):
        try:
            await FORM_DATA.next()
            async with state.proxy() as data:
                data['active'] = float(callback_query.data)
            await bot.send_message(callback_query.from_user.id, '<i>–¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ! –ü–æ –∫–∞–∫–æ–π —Ñ–æ—Ä–º—É–ª–µ —Ä–∞—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–∏?</i>', reply_markup = kb_formuls, parse_mode = 'HTML')
        except:
            pass

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ - —Ñ–æ—Ä–º—É–ª
    @dp.message_handler(state = '*')
    async def processing_formuls(msg: types.Message, state: FSMContext):
        global result, weightKeep, weightLoss, fastWeightLost

        # Remove keyboard
        kb_formuls = types.ReplyKeyboardRemove()

        try:
            async with state.proxy() as data:
                if msg.text == '–ú–∏—Ñ—Ñ–ª–∏–Ω–∞ - –°–∞–Ω –ñ–µ–æ—Ä–∞':
                    if data['gender'] == 'genderMale':
                        result = calc_sanJeor_male(data['age'], data['growth'], data['weight'], data['active'])
                    elif data['gender'] == 'genderFemale':
                        result = calc_sanJeor_female(data['age'], data['growth'], data['weight'], data['active'])
                    else:
                        result = calc_sanJeor_male(data['age'], data['growth'], data['weight'], data['active'])
                elif msg.text  == '–•–∞—Ä—Ä–∏—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞':
                    if data['gender'] == 'genderMale':
                        result = calc_benidikt_male(data['age'], data['growth'], data['weight'], data['active'])
                    elif data['gender'] == 'genderFemale':
                        result = calc_benidikt_female(data['age'], data['growth'], data['weight'], data['active'])
                    else:
                        result = calc_benidikt_male(data['age'], data['growth'], data['weight'], data['active'])

            # calories calculation 
            weightKeep = round(result)
            weightLoss = round(result - (result * 0.2))
            fastWeightLost = round(weightLoss - (weightLoss * 0.25))

            if (msg.text == '–ú–∏—Ñ—Ñ–ª–∏–Ω–∞ - –°–∞–Ω –ñ–µ–æ—Ä–∞') or (msg.text  == '–•–∞—Ä—Ä–∏—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞'):
                await bot.send_message(msg.from_user.id, md.text(
                    md.text('‚úçÔ∏è –í—Å—ë –≥–æ—Ç–æ–≤–æ! –Ø –ø–æ—Å—á–∏—Ç–∞–ª –¥–ª—è —Ç–µ–±—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–ª–æ—Ä–∏–π –≤ —Å—É—Ç–∫–∏.'),
                    md.text(' '),
                    md.text('‚úÖ –î–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞: ', md.bold(weightKeep), '–∫–∫.'),
                    md.text('‚úÖ –î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞: ', md.bold(weightLoss), '–∫–∫.'),
                    md.text('‚úÖ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞: ', md.bold(fastWeightLost), '–∫–∫.'),
                    sep = '\n'), reply_markup = kb_formuls, parse_mode = ParseMode.MARKDOWN)

                await bot.send_message(msg.from_user.id, '<i>–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å,\n—Ç–æ –Ω–∞–ø–∏—à–∏: /calories.\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–ø–∏—à–∏: /start.</i>', parse_mode = 'HTML')

                await state.finish()
        except:
            pass

"""/BOT FUNCTIONS"""


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        print('Works...')
        executor.start_polling(dp, skip_updates = True)
    except:
        print('Error at startup!')
    finally:
        print('Completed.')